{:files {:extensions #{"cljc" "cljs" "clj" "cljx"},
         :ignore     #{".hg" ".git"}},
 :rules {:namespaces  {:enabled?           true,
                       :indent-size        2,
                       :break-libs?        true,
                       :import-break-width 100},
         :whitespace  {:enabled?            true,
                       :remove-surrounding? true,
                       :remove-trailing?    true,
                       :insert-missing?     true},
         :comments    {:enabled?       true,
                       :inline-prefix  " ",
                       :leading-prefix " "},
         :functions   {:enabled? true},
         :eof-newline {:enabled?         true,
                       :trailing-blanks? false},
         :types       {:enabled?   true,
                       :types?     true,
                       :protocols? true,
                       :reifies?   true,
                       :proxies?   true},
         :blank-lines {:enabled?          true,
                       :trim-consecutive? true,
                       :max-consecutive   1,
                       :insert-padding?   true,
                       :padding-lines     1},
         :indentation {:enabled?    true,
                       :list-indent 2,
                       :indents     {are              [[:block 2]],
                                     when-first       [[:block 1]],
                                     cond->>          [[:block 1]],
                                     while            [[:block 1]],
                                     #"^def"          [[:inner 0]],
                                     try              [[:block 0]],
                                     bound-fn         [[:inner 0]],
                                     thrown-with-msg? [[:block 2]],
                                     match            [[:block 1]],
                                     testing          [[:block 1]],
                                     if-not           [[:block 1]],
                                     doseq            [[:block 1]],
                                     finally          [[:block 0]],
                                     deftype          [[:block 1] [:inner 1]],
                                     when-let         [[:block 1]],
                                     go               [[:block 0]],
                                     if-some          [[:block 1]],
                                     with-precision   [[:block 1]],
                                     let              [[:block 1]],
                                     defstruct        [[:block 1]],
                                     doto             [[:block 1]],
                                     future           [[:block 0]],
                                     fn               [[:inner 0]],
                                     alt!             [[:block 0]],
                                     as->             [[:block 1]],
                                     do               [[:block 0]],
                                     when-not         [[:block 1]],
                                     when             [[:block 1]],
                                     extend           [[:block 1]],
                                     go-loop          [[:block 1]],
                                     defn             [[:inner 0]],
                                     if               [[:block 1]],
                                     ns               [[:block 1]],
                                     deftest          [[:inner 0]],
                                     extend-type      [[:block 1] [:inner 1]],
                                     defmethod        [[:inner 0]],
                                     struct-map       [[:block 1]],
                                     extend-protocol  [[:block 1] [:inner 1]],
                                     cond->           [[:block 1]],
                                     dotimes          [[:block 1]],
                                     reify            [[:inner 0] [:inner 1]],
                                     with-open        [[:block 1]],
                                     defonce          [[:inner 0]],
                                     defn-            [[:inner 0]],
                                     alt!!            [[:block 0]],
                                     defprotocol      [[:block 1] [:inner 1]],
                                     letfn            [[:block 1] [:inner 2 0]],
                                     use-fixtures     [[:inner 0]],
                                     loop             [[:block 1]],
                                     with-out-str     [[:block 0]],
                                     condp            [[:block 2]],
                                     cond             [[:block 0]],
                                     for              [[:block 1]],
                                     binding          [[:block 1]],
                                     with-local-vars  [[:block 1]],
                                     defmacro         [[:inner 0]],
                                     proxy            [[:block 2] [:inner 1]],
                                     with-redefs      [[:block 1]],
                                     locking          [[:block 1]],
                                     defmulti         [[:inner 0]],
                                     if-let           [[:block 1]],
                                     case             [[:block 1]],
                                     catch            [[:block 2]],
                                     thread           [[:block 0]],
                                     comment          [[:block 0]],
                                     #"^with-"        [[:inner 0]],
                                     defrecord        [[:block 1] [:inner 1]],
                                     thrown?          [[:block 1]],
                                     when-some        [[:block 1]],
                                     def              [[:inner 0]]}},
         :vars        {:enabled? true}}}
